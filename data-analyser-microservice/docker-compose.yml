version: '3.0'

networks:
  app:
    driver: bridge

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  debezium-data:
    driver: local

services:
  analyser:
    #    image: 'jambbo/data-analyser-microservice:latest'
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - app
    depends_on:
      - db
      - zookeeper
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_SUBSCRIBED_TOPICS=${KAFKA_SUBSCRIBED_TOPICS}
      - HOST=${PG_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '8082:8082'


  db:
    image: postgres:15.1-alpine
    networks:
      - app
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5439:5432'
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    volumes:
      - db-data:/var/lib/postgresql/data

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2182:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    depends_on:
      - zookeeper

  redis:
    image: redis:7.2-rc-alpine
    networks:
      - app
    env_file:
      - .env
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis-data:/data

  debezium:
    image: 'debezium/connect:2.4.0.Final'
    networks:
      - app
    depends_on:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - GROUP_ID=${DEBEZIUM_KAFKA_BROKER_ID}
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    user: root
    command:
      - bash
      - -c
      - "cd /on-startup; ls; ./run.sh"
    volumes:
      - debezium-data:/debezium/data
      - ./conf:/on-startup/ #package called "conf" will throw to the package "on-startup"





